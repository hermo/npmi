#!/usr/bin/env bash

set -u
set -o pipefail

if [[ ! ${TMPDIR+_} ]]; then
    TMPDIR="/tmp"
fi

readonly VERSION="4.3.0"
CACHEDIR="$TMPDIR/npmi"
VERBOSE=${VERBOSE:-0}
FORCE=${FORCE:-0}
CACHE_EXISTING=${CACHE_EXISTING:-0}
REDIS_SERVER=${REDIS_SERVER:-""}
REDIS_PORT=${REDIS_PORT:-"6379"}
REDIS_TTL=${REDIS_TTL:-86400}
REDIS_PREFIX=${REDIS_PREFIX:-"NPMI4"}

format_heredoc() {
    awk 'NR==1 && match($0, /^ +/){n=RLENGTH} {print substr($0, n+1)}'
}

usage() {
    cat <<- EOF | format_heredoc
        NPMI v${VERSION} - a caching 'npm install'
        Usage: $0 [-hcfv]
        -h    Display this help"
        -c    Use specified cache dir: Default $TMPDIR/npmi
        -e    Cache existing node_modules AKA 'Oops I forgot to npmi' mode
        -f    Force install from NPM and update cache
        -r    Use specified Redis server for shared cache
        -t    Specify Redis TTL in seconds. Default: $REDIS_TTL
        -v    Verbose output
EOF
}

parse_args() {
    while getopts 'hc:efvr:t:' OPTION; do
        case $OPTION in
            h)
                usage
                exit 1
                ;;
            c)
                if [ ! -d "$OPTARG" ]; then
                    echo "ERROR: Specified cache dir $OPTARG does not exist"
                    exit 1
                fi
                CACHEDIR="$OPTARG"
                ;;
            e)
                CACHE_EXISTING=1
                ;;
            f)
                FORCE=1
                ;;
            v)
                VERBOSE=1
                ;;
            r)
                REDIS_SERVER="$OPTARG"
                ;;
            t)
                REDIS_TTL="$OPTARG"
                ;;
        esac
    done
}

vecho() {
    test $VERBOSE -eq 1 && echo "$*"
    return 0
}

load_npmirc() {
    local config="$1"

    if [ -r "$config" ]; then
        if egrep -q -v '^#|^[^ ]*=[^;]*' "$config"; then
            echo "ERROR: $config may only contain KEY=VALUE settings and comments!"
            exit 2
        fi
        . "$config"
        vecho "- Using configuration from $config"
    fi
}

hasbin() {
    hash "$1" 2>/dev/null
}

sanitycheck() {
    if [ ! -d "$CACHEDIR" ]; then
        if ! mkdir "$CACHEDIR"; then
            echo "ERROR: Can't create cache directory $CACHEDIR"
            exit 1
        fi
    fi

    local bins=(cut tar node npm awk mktemp)
    if [ -n "$REDIS_SERVER" ]; then
        bins+=(redis-cli)
        # Find 'head' command with support for negative values. This is
        # used to remove trailing LFs from redis-cli GET output.
        testhead() {
            echo test | "$1" -c-1 >/dev/null 2>&1
        }

        if hasbin "head" && testhead "head"; then
            CMD_HEAD="head"
        elif hasbin "ghead" && testhead "ghead"; then
            CMD_HEAD="ghead"
        else
            echo "ERROR: Cannot find 'head' command with support for negative values"
        fi
    fi

    for bin in "${bins[@]}"; do
        if ! hasbin "$bin"; then
            echo "ERROR: Binary $bin not found"
            exit 1
        fi
    done

    if hasbin "md5sum"; then
        CMD_MD5SUM="md5sum"
    elif hasbin "gmd5sum"; then
        CMD_MD5SUM="gmd5sum"
    elif hasbin "md5"; then
        CMD_MD5SUM="md5 -q"
    else
        echo "ERROR: md5sum or md5 binary not found"
        exit 1
    fi

}

get_hash() {
    local file="$1"
    if [ -f "$file" ]; then
        HASH=$($CMD_MD5SUM "$file" | cut -c1-32)
    else
        return 1
    fi
}

determine_hash() {
    HASH_SOURCES='npm-shrinkwrap.json package.json'

    for HASH_SOURCE in $HASH_SOURCES; do
        get_hash "$HASH_SOURCE" && break
    done
}

remove_modules() {
    if [ -d "node_modules" ]; then
        rm -rf node_modules
    fi
}

fetch_from_redis() {
    local host="$1"
    local key="$2"
    local dstfile="$3"
    local tempfile
    tempfile="$(mktemp)"
    redis-cli --raw -p "$REDIS_PORT" -h "$host" GET "$REDIS_PREFIX-$key" \
        | $CMD_HEAD -c-1 > "$tempfile"

    local templen
    templen="$(wc -c < "$tempfile")"

    if [ "$templen" -ge 10 ]; then
        mv "$tempfile" "$dstfile"
        vecho "- Redis lookup HIT"
        # "touch" the key to extend it's ttl
        if redis-cli --raw -p "$REDIS_PORT" -h "$host" \
            EXPIRE "$REDIS_PREFIX-$key" "$REDIS_TTL" > /dev/null; then
                return 0
        fi
        echo "ERROR: Could not extend Redis TTL"
        return 2
    else
        vecho "- Redis lookup MISS"
        rm "$tempfile"
        return 1
    fi
}

store_to_redis() {
    local host="$1"
    local key="$2"
    local srcfile="$3"
    if redis-cli -x --raw -p "$REDIS_PORT" -h "$host" SETEX "$REDIS_PREFIX-$key" "$REDIS_TTL" < "$srcfile" >/dev/null; then
        vecho "- Store to redis OK"
        return 0
        vecho "- Store to redis FAIL"
        return 1
    fi
}

install_from_cache() {
    local cachefile="$1"
    local key="$2"

    if [ -n "$REDIS_SERVER" ] && [ ! -f "$cachefile" ]; then
        fetch_from_redis "$REDIS_SERVER" "$key" "$cachefile"
    fi

    if [ -f "$cachefile" ]; then
        tar xfz "$cachefile"
        if [ $? -eq 0 ]; then
            return 0
        else
            return 2
        fi
    else
        return 1
    fi
}

install_from_npm() {
    npm install --loglevel error >/dev/null 2>&1
    return $?
}

store_to_cache() {
    local cachefile="$1"

    tar cfz "$cachefile" node_modules
    if [ $? -ne 0 ]; then
        rm -f "$cachefile"
        return 1
    fi
}

main() {
    local platform
    platform=$(node -p 'process.version + "-" + process.platform + "-" + process.arch')

    if [ $? -ne 0 ]; then
        echo "ERROR: Cannot determine node platform prefix"
        exit 2
    fi

    # Sets HASH, HASH_SOURCE
    determine_hash
    if [[ ! ${HASH+_} ]]; then
        echo "ERROR: Can't find npm-shrinkwrap.json/package.json"
        exit 1
    fi

    local cache_key="$platform-$HASH"
    local cache_file="$CACHEDIR/$cache_key.tgz"
    vecho "- HASH ${HASH} determined from ${HASH_SOURCE} (${cache_key})"

    if [ $CACHE_EXISTING -eq 1 ]; then
        if store_to_cache "$cache_file"; then
            vecho "- Modules cached successfully"
            if [ -n "$REDIS_SERVER" ]; then
                if store_to_redis "$REDIS_SERVER" "$cache_key" "$cache_file"; then
                    vecho "- Stored to redis successfully"
                    exit 0
                else
                    echo "ERROR: Redis store failed..."
                    exit 2
                fi
            fi
        else
            echo "ERROR: tar command failed..."
            exit 2
        fi
    fi

    vecho "- Cleaning node_modules..."
    if ! remove_modules; then
        echo "ERROR: Cannot remove node_modules"
        exit 2
    fi

    if [ $FORCE -eq 0 ]; then
        vecho "- Attempt to install from cache"
        install_from_cache "$cache_file" "$cache_key"
        case $? in
            0)
                vecho "- Modules installed successfully"
                exit 0
                ;;
            1)
                vecho "- Modules not found in cache"
                ;;
            *)
                echo "ERROR: Install from cache failed"
                exit 2
                ;;
        esac
        vecho "- Installing modules from NPM"
    else
        vecho "- FORCE: Installing modules from NPM"
    fi

    if ! install_from_npm; then
        echo "ERROR: NPM install failed"
        exit 2
    fi

    if [ $FORCE -eq 1 ]; then
        if [ -f "$cache_file" ]; then
            vecho "- FORCE: Remove existing cache file"
            if ! rm "$cache_file"; then
                echo "ERROR: Could not remove cache file"
                exit 2
            fi
        fi
    fi

    if store_to_cache "$cache_file"; then
        vecho "- Modules cached successfully"
    else
        echo "ERROR: tar command failed..."
        exit 2
    fi

    if [ -n "$REDIS_SERVER" ]; then
        if store_to_redis "$REDIS_SERVER" "$cache_key" "$cache_file"; then
            exit 0
        else
            echo "ERROR: Redis store failed..."
            exit 2
        fi
    fi
}


# Try to load .npmirc
load_npmirc "/etc/npmirc"
load_npmirc "$HOME/.npmirc"
load_npmirc ".npmirc"

parse_args "$@"

# Make sure everything is good to go
sanitycheck

main
